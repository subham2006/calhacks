import {
  useDelaySvgExport,
  useEditor,
  useSvgExportContext,
  useValue
} from "@tldraw/editor";
import { useEffect, useRef, useState } from "react";
function useAsset(options) {
  const { shapeId, assetId, width } = options;
  const editor = useEditor();
  const [url, setUrl] = useState(null);
  const [isPlaceholder, setIsPlaceholder] = useState(false);
  const isExport = !!useSvgExportContext();
  const asset = assetId ? editor.getAsset(assetId) : null;
  const culledShapes = editor.getCulledShapes();
  const isCulled = culledShapes.has(shapeId);
  const didAlreadyResolve = useRef(false);
  const isReady = useDelaySvgExport();
  useEffect(() => {
    if (url) didAlreadyResolve.current = true;
  }, [url]);
  const shapeScale = asset && "w" in asset.props ? width / asset.props.w : 1;
  const screenScale = useValue("zoom level", () => editor.getZoomLevel() * shapeScale, [
    editor,
    shapeScale
  ]);
  useEffect(() => {
    if (url) didAlreadyResolve.current = true;
  }, [url]);
  useEffect(() => {
    if (!isExport && isCulled) return;
    if (assetId && !asset?.props.src) {
      const preview = editor.getTemporaryAssetPreview(assetId);
      if (preview) {
        setUrl(preview);
        setIsPlaceholder(true);
        isReady();
        return;
      }
    }
    let isCancelled = false;
    async function resolve() {
      const resolvedUrl = await editor.resolveAssetUrl(assetId, {
        screenScale,
        shouldResolveToOriginal: isExport
      });
      if (!isCancelled) {
        setUrl(resolvedUrl);
        setIsPlaceholder(false);
        isReady();
      }
    }
    if (didAlreadyResolve.current) {
      const timer = editor.timers.setTimeout(resolve, 500);
      return () => {
        clearTimeout(timer);
        isCancelled = true;
      };
    } else {
      resolve();
      return () => {
        isCancelled = true;
      };
    }
  }, [assetId, asset?.props.src, isCulled, screenScale, editor, isExport, isReady]);
  return { asset, url, isPlaceholder };
}
export {
  useAsset
};
//# sourceMappingURL=useAsset.mjs.map
